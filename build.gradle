// A Gradle Buildscript for an AWS Lambda Java Project.
// After providing values for the five variables below,
// run the deploy and invoke tasks, to see it working.

def awsProfileName="MyEduUser"
def roleName="arn:aws:iam::************:role/MyEduLambdaExecRole"
def lambdaFunctionName= "lambda-pojo"
def handlerName="com.wolfpaulus.aws.Prime"
def jsonPayload="{\"number\": 17}"
//def lambdaFunctionName= "lambda-lex"
//def handlerName="com.wolfpaulus.aws.Prime::handleLexRequest"


// Gradle AWS Plugin
// more details: https://github.com/classmethod/gradle-aws-plugin (Req. Java 8)
import com.amazonaws.services.lambda.model.InvocationType
import com.amazonaws.services.lambda.model.LogType
import com.amazonaws.services.lambda.model.Runtime
import jp.classmethod.aws.gradle.lambda.AWSLambdaInvokeTask
import jp.classmethod.aws.gradle.lambda.AWSLambdaMigrateFunctionTask

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.30"
    }
}

apply plugin: 'java'
apply plugin: 'jp.classmethod.aws.lambda'

group 'com.wolfpaulus.aws'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    // AWS Lambda
    compile group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.1.0'
    compile group: 'com.amazonaws', name: 'aws-lambda-java-events', version: '1.3.0'
    // Amazon Lex
    compile group: 'com.amazonaws', name: 'aws-java-sdk-lexmodelbuilding', version: '1.11.170'
    // Logging
    compile group: 'com.amazonaws', name: 'aws-lambda-java-log4j', version: '1.0.0'
    // Unit Test
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

task buildZip(type: Zip, dependsOn: test) {
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtime
    }
}

aws {
    profileName = awsProfileName
}

task deploy(type: AWSLambdaMigrateFunctionTask, dependsOn: build) {
    functionName = lambdaFunctionName
    handler = handlerName
    role = roleName
    runtime = Runtime.Java8
    zipFile = buildZip.archivePath
    memorySize = 128
    timeout = 15
}

task invoke(type: AWSLambdaInvokeTask) {
    functionName = lambdaFunctionName
    invocationType = InvocationType.RequestResponse
    logType = LogType.Tail
    payload = jsonPayload
    doLast {
        println "Status code: " + invokeResult.statusCode
        println "Log result: " + new String(Base64.getDecoder().decode(invokeResult.logResult))
        println "Lambda function result: " + new String(invokeResult.payload.array(), "UTF-8")
    }
}

build.dependsOn buildZip
